{
    init: function(){
        var NUM_OF_ENEMIES=17;
        var NUM_OF_FOOD=60;
        var NUM_OF_MUTATIONS = 10;
        var NUM_OF_CREATURES=5;
        var NUM_OF_ROCKS=60;

        var spawnDistance=200;
        //avoid spawning too close to world bounds
        var centerSpawnPoint=new Phaser.Point(game.rnd.integerInRange(spawnDistance*2,game.world.width-spawnDistance*2),
            game.rnd.integerInRange(spawnDistance*2,game.world.height-spawnDistance*2));
        for (var x=0;x<NUM_OF_CREATURES;x++){
            var newCreature=new evolution.Creature(game,_generateId(),game.world.width/2,game.world.height/2);
            creaturesLayer.add(newCreature);

            _placeWithoutCollision(newCreature,[spriteArrays.all],function(sprite){
                var spawnPoint = new Phaser.Point(centerSpawnPoint.x+game.rnd.realInRange(-spawnDistance,spawnDistance),
                    centerSpawnPoint.y+game.rnd.realInRange(-spawnDistance,spawnDistance));
                sprite.body.x=spawnPoint.x;
                sprite.body.y=spawnPoint.y;
            });

            spriteArrays.all.push(newCreature);
        }

        //draw rocks
        for (x=0;x<NUM_OF_ROCKS;x++){
            var newRock = new evolution.Rock(game,_generateId(),0,0);
            groups.rocks.add(newRock);

            _placeWithoutCollision(newRock,[spriteArrays.all]);
            spriteArrays.rocks.push(newRock);
        }


        //enemies
        for (x=0;x<NUM_OF_ENEMIES;x++){
            var enemy=new evolution.Enemy1(game,_generateId(),0,0);
            enemyLayer.add(enemy);

            _placeWithoutCollision(enemy,[spriteArrays.all,spriteArrays.rocks],function(enemy){
                //place enemy outside of aggo range
                var inAggroRange=true;
                while (inAggroRange){
                    inAggroRange=false;
                    enemy.body.x=game.world.randomX;
                    enemy.body.y=game.world.randomY;
                    creaturesLayer.forEachAlive(function(creature){
                        if(Phaser.Point.distance(enemy.body,creature.body)<enemy.aggroTriggerDistance*1.5){
                            inAggroRange=true;
                            return;
                        }
                    });
                }
            });

            spriteArrays.all.push(enemy);
        }

        //food
        for (x=0;x<NUM_OF_FOOD;x++){
            var newFood=new evolution.Food(game,_generateId(),0,0);
            _placeWithoutCollision(newFood,[spriteArrays.all,spriteArrays.rocks]);
            spriteArrays.all.push(newFood);
            powerupLayer.add(newFood);
        }

        //food
        for (x=0;x<NUM_OF_MUTATIONS;x++){
            var newMutation=new evolution.Mutation(game,_generateId(),0,0);
            _placeWithoutCollision(newMutation,[spriteArrays.all,spriteArrays.rocks]);
            spriteArrays.all.push(newMutation);
            powerupLayer.add(newMutation);
        }
    }
};